## Exercice 9 : conditions et Booleans

1. Cr√©er un tableau associatif pour une t√¢che. Ce tableau doit inclure des d√©tails tels que le titre de la t√¢che `title`, sa date de fin `due`, le nom de la personne √† qui elle est assign√©e `assigned_to` et si elle a √©t√© achev√©e `done`. la valeur de `done` devrait √™tre de type **bool√©en.**
2. Afficher le d√©tail de la t√¢che sous format liste **HTML.** Si la valeur de `done` est `true` afficher **Done.** Si non afficher **Doing**.
3. **Challenge :** cr√©er un tableau associatif pour plusieurs t√¢ches et afficher le d√©tail des t√¢ches qui n'ont pas encore √©t√© compl√©t√©.

**Terminologies : `array` `foreach` `separation of concerns` `li` `ul` `endforeach` `key => value` `nested associative arrays` `if` `else` `ternary`**

## Exercice 11 : les fonctions

- Explication
    
    En termes simples, un appel est une partie de votre code que vous pouvez "appeler". Lorsque nous disons que vous pouvez "appeler" quelque chose, nous voulons dire que vous pouvez dire au programme de l'ex√©cuter.
    
    Un appel peut √™tre √©crit avec des parenth√®ses, par exemple, `functionName().`
    
    Comme d√©crit pr√©c√©demment, une fonction est un type de callable, donc une fonction peut √™tre appel√©e (c'est-√†-dire que vous pouvez dire √† votre programme de l'ex√©cuter).
    
    Voici un exemple : 
    
    ```php
    function howManyTimesDidWeTellYou(int $numberOfTimes): string
    {
        return "You told me $numberOfTimes times";
    }
    ```
    
    Ne vous pr√©occupez pas des d√©tails de la fonction pour l'instant - nous entrerons dans le vif du sujet plus tard. Cette fonction peut √™tre d√©finie n'importe o√π dans votre code, mais supposons qu'elle soit d√©finie dans un script appel√© how-many-times-did-we-tell-you.php.
    
    Le contenu du script ressemblerait alors √† ceci :
    
    ```php
    <?php
    declare(strict_types=1);
    function howManyTimesDidWeTellYou(int $numberOfTimes): string
    {
        return "You told me {$numberOfTimes} times";
    }
    ```
    
    La fonction prend un seul param√®tre, `$numberOfTimes`, qui doit √™tre du type `int` (entier), et elle renvoie une cha√Æne de caract√®res. L'indice du type `int` et le type de retour de la cha√Æne de caract√®res sont facultatifs. Maintenant, la fonction `howManyTimesDidWeTellYou(int $numberOfTimes) : string` n'est que la d√©claration de la fonction : elle d√©finit la fonction. Le script lui-m√™me ne fait encore rien.
    
    Pour que la fonction puisse r√©ellement faire quelque chose, nous devons l'appeler √† partir de notre code. Il est parfaitement valable de continuer dans le m√™me fichier de script et d'appeler la fonction que nous venons de d√©finir comme suit :
    
    ```php
    echo howManyTimesDidWeTellYou(1);
    echo PHP_EOL (PHP_EOL est une constante predifinie en PHP pour faire un break line)
    ```
    
1. R√©digez une fonction qui d√©termine si un √¢ge donn√© (envoy√© comme argument) est assez √©lev√© pour s'inscrire √† **YouCode** (entre 18 ans et 35 ans). Demandez √† cette fonction de renvoyer un bool√©en, qui peut √™tre utilis√© dans n'importe quel conditionnel.

**Terminologies : `function` `arguments` `logical operators` `comparison operators`**

## Exercice 12 : les fonctions pr√©d√©finies

- Explication
    
    En PHP on trouve des milliers de fonctions  pr√©d√©finies qu'on peut les utiliser afin de nous faciliter le travail . voici quelques exemples des fonctions pr√©d√©finies en `PHP`  :
    
    - [**String functions**](https://www.w3schools.com/php/php_ref_string.asp)
    - [**Math functions**](https://www.w3schools.com/php/php_ref_math.asp)
    - [**Date functions**](https://www.php.net/manual/en/ref.datetime.php)
    - [**Array functions**](https://www.w3schools.com/php/php_ref_array.asp)
    
    <aside>
    üí° Pour afficher un array on utilise la fonction : print_r($array).
    
    </aside>
    
    <aside>
    üí° la fonction var_dump($var) est tr√®s utile pour le d√©bogage.
    
    </aside>
    
    <aside>
    üí° la fonction echo et print sont tr√®s utilis√© pour l'affichage.
    
    </aside>
    
1. Simulez le jeu du champ de tir. Ce jeu consiste √† essayer de d√©couvrir un nombre quelconque entre 1 et 100 inclus, tir√© par l'ordinateur (la primitive rand(min, max) renvoie un entier entre min et max). L'utilisateur a droit √† un maximum de huit essais. A chaque √©preuve, vous devez afficher un message cod√© "nombre donn√© trop petit" ou "nombre donn√© trop grand". En conclusion, est "bravo, vous avez trouv√© dans [nombre] test(s)" ou "d√©sol√©, le nombre √©tait [valeur]".

**Terminologies : `RAND()` `ifelse` `for` `concat√©nation`**  

## Exercice 13 : (challenge) application web calculatrice

Vous travaillez sur calculatrice. On vous donne tout le code de l'interface utilisateur, mais on vous demande de cr√©er la fonction qui effectuera les calculs. Vous devez cr√©er une fonction unique qui soit r√©utilisable pour tous les calculs n√©cessaires dans l'application.

Les √©tapes suivantes vous aideront √† r√©aliser l'activit√© :

1. Cr√©ez une fonction **`factorielle`** qui calculera et retournera le **factoriel** du nombre d'entr√©e.
2. Cr√©ez une fonction **`somme`** qui retournera la **somme** des nombres d'entr√©e (un nombre variable de param√®tres).
3. Cr√©ez une fonction `**nombrePremier**` qui √©valuera un nombre entr√©, qui doit √™tre un nombre entier et qui retournera si le nombre est un nombre premier ou non. Le type de retour de cette fonction est un bool√©en (`bool`).
4. Cr√©er une fonction `**performOperation**` de base qui traitera les op√©rations math√©matiques pr√©d√©finies mentionn√©es en dessus. Le premier param√®tre de la fonction `**performOperation**` doit √™tre une cha√Æne de caract√®res, soit "**`factorielle`**", soit "**`somme`**", soit "`**nombrePremier**`. Les arguments restants sont transmis √† la fonction math√©matique appel√©e en tant qu'arguments.

**Terminologies : `declare(strict_types=1);` `while` `return array_sum` `func_get_args()` `for` `call_user_func_array`**
